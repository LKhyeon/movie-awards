{"version":3,"sources":["components/search.js","components/movieList.js","components/nomination.js","App.js","reportWebVitals.js","index.js"],"names":["Search","eventHandler","className","placeholder","onChange","MovieList","props","state","entries","compareArrays","bind","fetchData","populateList","arr1","arr2","length","i","j","Title","keyWord","fetch","then","res","status","json","newEntries","setState","catch","error","console","log","this","movies","info","Year","limitReached","nominations","selected","includes","push","movie","onClick","disabled","toString","Component","Nomination","entry","saveFunc","App","saveNominations","localStorage","setItem","JSON","stringify","displayBanner","nominateMovie","event","target","getAttribute","removeNomination","newNominations","changeKey","value","record","parse","getItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7eba8e46.chunk.js","sourcesContent":["import \"./css/search.css\"\n\n/**\n * Callback functions possible in creating a search bar.\n * @callback eventHandler\n */\n\n/**\n* Creates a section of the Shoppies app that allows the user to search for a movie.\n* \n* @param {object} props - A properties required to create nomination sections.\n* @param {eventHandler} props.eventHandler - Event handler that changes the keyword.\n*/\nconst Search = ({eventHandler}) => {\n    return (\n        <div className=\"Search\">\n            <p> SEARCH MOVIE TITLES TO NOMINATE </p>\n            <input\n                placeholder={\"Type here for the movie titles\"}\n                onChange={eventHandler} />\n        </div>\n    )\n}\n\nexport default Search;","import React, {Component} from \"react\"\nimport \"./css/movieList.css\"\n\n/**\n* Creates a section of the Shoppies app that displays the search result with\n* an option to nominate any of the entries.\n*/\nclass MovieList extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            /** An array holding the search result. */\n            entries: [],\n        }\n        this.compareArrays = this.compareArrays.bind(this);\n        this.fetchData = this.fetchData.bind(this);\n        this.populateList = this.populateList.bind(this);\n    }\n\n    /**\n    * Compares two arrays holding movie information. Two arrays are the same if and only\n    * if their lengths are the same and if the elements within the array equals each other\n    * one-to-one.\n    * \n    * @param {Array} arr1 - The first array of movies.\n    * @param {Array} arr2 - The first array of movies.\n    * @returns {boolean} True if the length and the elements in the arrays match each other.\n    */\n    compareArrays(arr1, arr2) {\n        if (arr1.length !== arr2.length) {\n            return false;\n        } else {\n            for (let i=0; i < arr1.length; i++) {\n                for (let j=0; j < arr2.length; j++) {\n                    if (arr1[i].Title !== arr2[i].Title) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n    * Send request to the OMDB API to obtain the list of movies based on the\n    * keyword the user has typed in the search bar. Then change entries prop to\n    * the list of movies from OMDB. \n    *\n    * If there wasn't any results from OMDB, the entries prop will be set to an\n    * empty array.\n    * \n    * @param {string} keyword - A keyword typed by the user.\n    */\n    fetchData(keyWord) {\n        if (keyWord !== \"\") {\n            fetch(\"https://www.omdbapi.com/?s=\" + keyWord + \"&apikey=39dd2421\")\n            .then(res => {\n                if (res.status === 200) {\n                    return res.json()\n                }\n            }).then((res) => {\n                const newEntries = (typeof res.Search !== \"undefined\") ? res.Search : [];\n\n                // Only update the entries prop if new one is different.\n                // This is important because updating the property will trigger re-rendering,\n                // which will call populateList(), which calls fetchData() once again.\n                // In short, without this check, unwanted recursion is created.\n                if (!this.compareArrays(this.state.entries, newEntries)) {\n                    this.setState({\n                        entries: newEntries\n                    })\n                }\n            }).catch((error) => {console.log(error)})\n        } else if (this.state.entries.length > 0) {\n            this.setState({\n                entries: []\n            })\n        }\n    }\n\n    /**\n    * Creates an array of HTML for each movies returned by OMDB.\n    * If there wasn't any results from OMDB, an empty array will be returned.\n    */\n    populateList() {\n        this.fetchData(this.props.keyWord)\n        const movies = [];\n        for (let i = 0; i < this.state.entries.length; i++) {\n            const info = `${this.state.entries[i].Title} (${this.state.entries[i].Year})`;\n\n            const limitReached = this.props.nominations.length === 5;\n            const selected = this.props.nominations.includes(info);\n            movies.push(\n                <div className=\"entry\" key={this.props.keyWord + i.toString()}>\n                    <button movie={info} className=\"Nominate\" onClick={this.props.eventHandler}\n                        disabled={limitReached || selected}>\n                        {(limitReached)? \"Disabled\" : \n                            ((selected) ? \"Nominated\" : \"Nominate\")}\n                    </button>\n                    {info}\n                </div>\n            )\n        }\n        return movies;\n    }\n\n    render() {\n        return (\n            <div className=\"MovieList\">\n                <p className=\"KeyWord\">\n                    {this.props.keyWord === \"\" ?\n                        \"Please type a movie title\" :\n                        `Results for \"${this.props.keyWord}\"`}\n                </p>\n                <div>\n                    {this.populateList()}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MovieList;","import \"./css/nomination.css\"\n\n/**\n * Callback functions possible in creating a nominations section.\n * @callback saveCallback\n * @callback eventHandler\n */\n\n/**\n* Creates a section of the Shoppies app that displays the nominated movies with\n* an option to remove any of them.\n* \n* @param {object} props - A properties required to create nomination sections.\n* @param {Array} props.entry - An array of nominated movies.\n* @param {eventHandler} props.eventHandler - Event handler that removes a movie from nominations.\n* @param {saveCallback} props.saveFunc - Saves nominated movies in the local storage. \n*/\nconst Nomination = ({entry, eventHandler, saveFunc}) => {\n\n    /**\n    * Creates an array of HTML for each nominated movies in the entry parameter \n    * and return it. If there wasn't any movies in the entry, an empty array will\n    * be returned.\n    * \n    * saveFunc will be called since we have the most-recent nominations information. \n    */\n    const populateList = () => {\n        saveFunc();\n\n        const nominations = [];\n        for (let i = 0; i < entry.length; i++) {\n            nominations.push(\n                <div className=\"entry\" key={entry[i] + i.toString()}>\n                    <button movie={entry[i]} className=\"Remove\" onClick={eventHandler}>\n                        Remove\n                    </button>\n                    {entry[i]}\n                </div>\n            )\n        }\n        return nominations;\n    }\n\n    return (\n        <div className=\"Nomination\">\n            <p className=\"KeyWord\"> \n                Nominations\n            </p>\n            <div>\n                {populateList()}\n            </div>\n        </div>\n    )\n}\n\nexport default Nomination;","import React, {Component} from \"react\"\n\nimport Search from './components/search'\nimport MovieList from './components/movieList'\nimport Nomination from './components/nomination'\n\nimport './App.css';\n\n/**\n * User events possible in the Shoppies app.\n * @typedef {object} OnclickEvent\n * @typedef {object} OnChangeEvent\n */\n\n/**\n* The Shoppies app that allows an user to nominate 5 movies.\n*/\nclass App extends Component {\n    constructor(props) {\n        super(props)\n\n        // Load previous nominations. If this is the first time the user is \n        // using this app, there will be nothing (null) in the local storage. \n        const record = JSON.parse(localStorage.getItem('ShpNomination'));\n\n        this.state = {\n            /** The keyword given by the user. */\n            keyWord: \"\",\n            /** The array of movie titles nominated by the user. */\n            nominations: (record !== null) ? record : [],\n        }\n    }\n\n    /**\n    * Saves the nominations to the local storage. Since loal storage only \n    * stores string, nominations property is stringified.\n    */\n    saveNominations = () => {\n        localStorage.setItem('ShpNomination', JSON.stringify(this.state.nominations));\n    }\n\n    /**\n    * Displays a banner if there are 5 entries in nominations property.\n    */\n    displayBanner = () => {\n        if (this.state.nominations.length === 5) {\n            return (\n                <div className=\"Banner\">\n                    YOU HAVE SUCCESSFULLY NOMINATED 5 MOVIES IN TOTAL\n                </div>\n            );\n        }\n    }\n\n    /**\n    * An event handler used to handle on-click events from the \"Nominate\" button\n    * to correctly insert a movie to the nominations property.\n    * \n    * @param {OnclickEvent} event - An event object containing useful information.\n    * @listens OnclickEvent\n    */\n    nominateMovie = (event) => {\n        this.setState({\n            nominations: [...this.state.nominations, event.target.getAttribute(\"movie\")]\n        });\n    }\n\n    /**\n    * An event handler used to handle on-click events from the \"Remove\" button\n    * to correctly remove a movie to the nominations property.\n    * \n    * @param {OnclickEvent} event - An event object containing useful information.\n    * @listens OnclickEvent\n    */\n    removeNomination = (event) => {\n        const newNominations = [];\n        for (let i=0; i < this.state.nominations.length; i++) {\n            if (this.state.nominations[i] !== event.target.getAttribute(\"movie\")) {\n                newNominations.push(this.state.nominations[i]);\n            }\n        }\n        this.setState({\n            nominations: newNominations\n        });\n    }\n\n    /**\n    * An event handler used to handle on-change events from the search bar\n    * to correctly update the keyWord prop as the content of the search bar changes.\n    * \n    * @param {OnChangeEvent} event - An event object containing useful information.\n    * @listens OnChangeEvent\n    */\n    changeKey = (event) => {\n        this.setState({\n            keyWord: event.target.value\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                {this.displayBanner()}\n                <header className=\"App-header\">\n                    <h1>\n                        The Shoppies\n                    </h1>\n                </header>\n                <Search eventHandler={this.changeKey}/>\n                <div className=\"Container\">\n                    <MovieList keyWord={this.state.keyWord} nominations={this.state.nominations}\n                                eventHandler={this.nominateMovie}/>\n                    <Nomination entry={this.state.nominations} eventHandler={this.removeNomination}\n                                saveFunc={this.saveNominations}/>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}