{"version":3,"sources":["components/search.js","components/movieList.js","components/nomination.js","App.js","reportWebVitals.js","index.js"],"names":["Search","eventHandler","className","placeholder","onChange","MovieList","props","state","entries","fetchData","bind","populateList","compareArrays","arr1","arr2","length","i","j","Title","keyWord","fetch","then","res","status","json","newEntries","setState","catch","error","console","log","this","movies","info","Year","push","movie","onClick","toString","Component","Nomination","entry","nominations","App","nominateMovie","event","target","getAttribute","changeKey","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e703f90.chunk.js","sourcesContent":["import \"./css/search.css\"\n\nconst Search = ({eventHandler}) => {\n    return (\n        <div className=\"Search\">\n            <p> MOVIE TITLE </p>\n            <input \n                placeholder={\"Search a movie\"}\n                onChange={eventHandler} />\n        </div>\n    )\n}\n\nexport default Search;","import React, {Component} from \"react\"\n\nimport \"./css/movieList.css\"\n\nclass MovieList extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            entries: [],\n        }\n        this.fetchData = this.fetchData.bind(this);\n        this.populateList = this.populateList.bind(this);\n        this.compareArrays = this.compareArrays.bind(this);\n    }\n\n    compareArrays(arr1, arr2) {\n        if (arr1.length !== arr2.length) {\n            return false;\n        } else {\n            for (let i=0; i < arr1.length; i++) {\n                for (let j=0; j < arr2.length; j++) {\n                    if (arr1[i].Title !== arr2[i].Title) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    fetchData(keyWord) {\n        if (keyWord !== \"\") {\n            fetch(\"https://www.omdbapi.com/?s=\" + keyWord + \"&apikey=39dd2421\")\n            .then(res => {\n                if (res.status === 200) {\n                    return res.json()\n                }\n            }).then((res) => {\n                const newEntries = (typeof res.Search !== \"undefined\") ? res.Search : [];\n                if (!this.compareArrays(this.state.entries, newEntries)) {\n                    this.setState({\n                        entries: newEntries\n                    })\n                }\n            }).catch((error) => {console.log(error)})\n        } else if (this.state.entries.length > 0) {\n            this.setState({\n                entries: []\n            })\n        }\n    }\n\n    populateList() {\n        this.fetchData(this.props.keyWord)\n        const movies = [];\n        for (let i = 0; i < this.state.entries.length; i++) {\n            const info = `${this.state.entries[i].Title} (${this.state.entries[i].Year})`\n            movies.push(\n                <div key={this.props.keyWord + i.toString()}>\n                    {info}\n                    <button movie={info} className=\"Nominate\" onClick={this.props.eventHandler}>\n                        Nominate\n                    </button>\n                </div>\n            )\n        }\n        return movies;\n    }\n\n    render() {\n        return (\n            <div className=\"MovieList\">\n                <p className=\"KeyWord\">\n                    {this.props.keyWord === \"\" ?\n                        \"Please type a movie title\" :\n                        \"Results for \\\"\" + this.props.keyWord + \"\\\"\"}\n                </p>\n                <div>\n                    {this.populateList()}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MovieList;","import \"./css/nomination.css\"\n\nconst Nomination = ({entry}) => {\n\n\tconst populateList = () => {\n        const nominations = [];\n        for (let i = 0; i < entry.length; i++) {\n            nominations.push(\n                <div key={entry[i] + i.toString()}>\n                    {entry[i]}\n                    <button movie={entry[i]} className=\"Remove\">\n                        Remove\n                    </button>\n                </div>\n            )\n        }\n        return nominations;\n    }\n\n    return (\n        <div className=\"Nomination\">\n            <p className=\"KeyWord\"> \n                Nominations\n            </p>\n            <div>\n                {populateList()}\n            </div>\n        </div>\n    )\n}\n\nexport default Nomination;","import React, {Component} from \"react\"\n\nimport Search from './components/search'\nimport MovieList from './components/movieList'\nimport Nomination from './components/nomination'\n\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            keyWord: \"\",\n            nominations: [],\n        }\n        this.changeKey = this.changeKey.bind(this);\n        this.nominateMovie = this.nominateMovie.bind(this);\n    }\n\n    nominateMovie = (event) => {\n        // console.log(event.target.getAttribute(\"movie\"));\n        this.setState({\n            nominations: [...this.state.nominations, event.target.getAttribute(\"movie\")]\n        });\n    }\n\n    changeKey = (event) => {\n        this.setState({\n            keyWord: event.target.value\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1>\n                        The Shoppies\n                    </h1>\n                </header>\n                <Search eventHandler={this.changeKey}/>\n                <div className=\"Container\">\n                    <MovieList keyWord={this.state.keyWord} eventHandler={this.nominateMovie}/>\n                    <Nomination entry={this.state.nominations}/>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}